// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Daniel Rahmanto",
            "email": "daniel.rahmanto@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/catalogs": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "catalogs"
                ],
                "summary": "Get catalogs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search by brand",
                        "name": "brand",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by model",
                        "name": "model",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CatalogResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/orders": {
            "post": {
                "description": "You need an 'Authorization' cookie attached within this request.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Submit new car rental order",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.OrderResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/orders/update": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Update payment info from Xendit's server if payment is successful.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Secret token from Xendit to validate the request",
                        "name": "x-callback-token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Attached data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.XenditWebhook"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/users/history": {
            "get": {
                "description": "You need an 'Authorization' cookie attached within this request.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user's order history",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.HistoryResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Log in with existing account",
                "parameters": [
                    {
                        "description": "Login data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.Login"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GeneralResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/users/pinpoint": {
            "get": {
                "description": "You need an 'Authorization' cookie attached within this request.",
                "produces": [
                    "image/png"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user's map location",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/users/register": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Register new user into database",
                "parameters": [
                    {
                        "description": "Register data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.Register"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/users/verify/{userid}/{token}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Verify newly registered email",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User Id",
                        "name": "userid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Secret Token",
                        "name": "token",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GeneralResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.Catalog": {
            "type": "object",
            "properties": {
                "brand": {
                    "type": "string"
                },
                "catalog_id": {
                    "type": "integer"
                },
                "category": {
                    "type": "string"
                },
                "cost": {
                    "type": "number"
                },
                "model": {
                    "type": "string"
                },
                "stock": {
                    "type": "integer"
                }
            }
        },
        "dto.CatalogLessDetail": {
            "type": "object",
            "properties": {
                "catalog_id": {
                    "type": "integer"
                },
                "model": {
                    "type": "string"
                }
            }
        },
        "dto.CatalogResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "x-order": "0"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Catalog"
                    },
                    "x-order": "1"
                }
            }
        },
        "dto.GeneralResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "x-order": "0"
                },
                "data": {
                    "type": "string",
                    "x-order": "1"
                }
            }
        },
        "dto.HistoryResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "x-order": "0"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.OrderSummary"
                    },
                    "x-order": "1"
                }
            }
        },
        "dto.Login": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "x-order": "0"
                },
                "password": {
                    "type": "string",
                    "x-order": "1"
                }
            }
        },
        "dto.OrderResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "x-order": "0"
                },
                "data": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.OrderSummary"
                        }
                    ],
                    "x-order": "1"
                }
            }
        },
        "dto.OrderSummary": {
            "type": "object",
            "properties": {
                "order_id": {
                    "type": "integer",
                    "x-order": "0"
                },
                "catalog": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.CatalogLessDetail"
                        }
                    ],
                    "x-order": "1"
                },
                "rent_date": {
                    "type": "string",
                    "x-order": "2"
                },
                "return_date": {
                    "type": "string",
                    "x-order": "3"
                },
                "invoice": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.SendInvoiceResponseLessDetailed"
                        }
                    ],
                    "x-order": "4"
                }
            }
        },
        "dto.Register": {
            "type": "object",
            "required": [
                "address",
                "birth",
                "email",
                "full_name",
                "password"
            ],
            "properties": {
                "full_name": {
                    "type": "string",
                    "x-order": "0"
                },
                "email": {
                    "type": "string",
                    "x-order": "1"
                },
                "password": {
                    "type": "string",
                    "x-order": "2"
                },
                "address": {
                    "type": "string",
                    "x-order": "3"
                },
                "birth": {
                    "type": "string",
                    "x-order": "4"
                }
            }
        },
        "dto.RegisterData": {
            "type": "object",
            "required": [
                "address",
                "birth",
                "email",
                "full_name"
            ],
            "properties": {
                "full_name": {
                    "type": "string",
                    "x-order": "0"
                },
                "email": {
                    "type": "string",
                    "x-order": "1"
                },
                "address": {
                    "type": "string",
                    "x-order": "2"
                },
                "birth": {
                    "type": "string",
                    "x-order": "3"
                }
            }
        },
        "dto.RegisterResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "x-order": "0"
                },
                "data": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.RegisterData"
                        }
                    ],
                    "x-order": "1"
                }
            }
        },
        "dto.SendInvoiceResponseLessDetailed": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "invoice_url": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "dto.XenditWebhook": {
            "type": "object",
            "properties": {
                "completed_at": {
                    "type": "string"
                },
                "external_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "payment_method": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "utils.ErrResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "integer",
                    "x-order": "0"
                },
                "type": {
                    "type": "string",
                    "x-order": "1"
                },
                "detail": {
                    "type": "string",
                    "x-order": "2"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "carstruck-4d6b89ee5e4e.herokuapp.com",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "carStruck API",
	Description:      "A car rental API utilizing payment gateway (Xendit) and Google Maps Static API. Made as a project for Hacktiv8, derived from myself to give a digitalized business solution.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
